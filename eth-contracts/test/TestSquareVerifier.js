// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
var proof = {
    "proof": {
        "a": ["0x03d744d4ad5e54ea8ca40fcd6c5bae4cb0133a3a1a1337d3ef547e6a16dc9e04", "0x07c02bd3573022d52c67570a3a3bc6d2d391e880b6caf198f91b9d047bde58b1"],
        "b": [["0x18699f4858cbc388e7b3a67a0fc2eae26558c689a4040e9dc5fffd6481dc0be2", "0x2213e39e371a3c8712c52175bb28db2a446fd0cde8799c53ff5abfb452d798dd"], ["0x1ae7f8c2b16f8ad2f69749ac3893a184cfda0c2460664865a1c94ed760ffeb32", "0x04d616505930db5e4d257cdfa306dac49fed60786c88e434b52f70f9ad9ec1dc"]],
        "c": ["0x1ef1a41477aa8fad00db0697c8511a5cdd62c530e8964e6473408d5855ad10c0", "0x193d4841b97e5ddb2308cc5c1edecccf5320bdf21acd80f9679c27154f1a0dde"]
    },
    "inputs": ["0x0000000000000000000000000000000000000000000000000000000000000009", "0x0000000000000000000000000000000000000000000000000000000000000001"]
};


    
// Test verification with incorrect proof
contract('Verifier', accounts => {
    const account = accounts[0];

    const A = proof["proof"]["a"];
    const B = proof["proof"]["b"];
    const C = proof["proof"]["c"];
    const correctProofInput = proof["inputs"];
    const incorrectProofInput = [1,2];

    describe('Testing Verifier', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({from: account});
        });

        it('Test verification with correct proof', async function () {
            let isVerified = await this.contract.verifyTx.call(A, B, C, correctProofInput, {from: account});
            assert.equal(isVerified, true, "Incorrect proof");
        });

        // Test verification with incorrect proof
        it('Test verification with incorrect proof', async function () {
            let isVerified = await this.contract.verifyTx.call(A, B, C, incorrectProofInput, {from: account});
            assert.equal(isVerified, false, "Correct proof");
        });
    });

})
